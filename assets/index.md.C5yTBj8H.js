import{V as c,a as m}from"./chunks/theme.B1pA6WAJ.js";import{d,c as o,o as l,F as p,G as t,k as f}from"./chunks/framework.BgId8OS5.js";const e=JSON.parse(`[{"title":"动画","details":"   import MyUnderline from './components/MyUnderline.vue'   下划线动画:     <<< ./components/MyUnderline.vue ","link":"前端/CSS/动画.html","fileTimeInfo":[1749554596000,1749554596000]},{"title":"原型到原型链","details":"    JavaScript 是动态的，本身不提供一个 class 的实现。即便是在 ES2015/ES6 中引入了 class 关键字，但那也只是语法糖，JavaScript 仍然是基于原型的。 当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 __proto__）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己","link":"前端/JavaScript/原型到原型链.html","fileTimeInfo":[1749554596000,1749554596000]},{"title":"深拷贝的实现","details":"   浅拷贝是指只复制第一层对象，但是当对象的属性是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。  深拷贝复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。深拷贝后的对象与原来的对象是完全隔离的，互不影响，对一个对象的修改并不会影响另一个对象。   变量存储类型分两类  1. 基本类型：直接存储在栈中的数据。（字符串、布尔值、数字、undefined、null","link":"前端/JavaScript/深拷贝的实现.html","fileTimeInfo":[1749554596000,1749554596000]},{"title":"3442.  奇偶频次间的最大差值 I","details":"3442. 奇偶频次间的最大差值 I  给你一个由小写英文字母组成的字符串 s 。  请你找出字符串中两个字符 a1 和 a2 的出现频次之间的 最大 差值 diff = a1 - a2，这两个字符需要满足：   a1 在字符串中出现 奇数次** 。  a2 在字符串中出现 偶数次** 。  返回 最大 差值。  示例 1：   输入： s = \\"aaaaabbc\\"  输出： 3  解释：    ","link":"算法/Leetcode/3442.  奇偶频次间的最大差值 I.html","fileTimeInfo":[1749554596000,1749554596000]}]`),_=d({__name:"Home",setup(r){`${e.length}`;const a={light:"/pic1.svg",dark:"/pic2.svg"},n=[{text:"随便逛逛",link:s()}];function s(){const i=e.length-1;return e[Math.floor(Math.random()*i)].link}return(i,h)=>(l(),o(p,null,[t(c,{name:"XaviDocs",text:"个人技术文档",image:a,actions:n}),t(m,{features:f(e)},null,8,["features"])],64))}}),S=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home"},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),u={name:"index.md"},k=Object.assign(u,{setup(r){return(a,n)=>(l(),o("div",null,[t(_)]))}});export{S as __pageData,k as default};
