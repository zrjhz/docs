const t='{"documentCount":23,"nextId":23,"documentIds":{"0":"/前端/JavaScript/原型到原型链.html#原型到原型链","1":"/前端/JavaScript/原型到原型链.html#前言","2":"/前端/JavaScript/原型到原型链.html#谈谈你对原型的理解","3":"/前端/JavaScript/原型到原型链.html#什么是原型链-原型链解决的是什么问题","4":"/前端/JavaScript/原型到原型链.html#prototype-和-proto-区别是什么","5":"/前端/JavaScript/原型到原型链.html#解析原型链","6":"/前端/JavaScript/原型到原型链.html#constructor","7":"/前端/JavaScript/原型到原型链.html#参考","8":"/前端/JavaScript/深拷贝的实现.html#深拷贝的实现","9":"/前端/JavaScript/深拷贝的实现.html#一、什么是深拷贝-深拷贝和浅拷贝有什么区别","10":"/前端/JavaScript/深拷贝的实现.html#二、js-的变量存储类型","11":"/前端/JavaScript/深拷贝的实现.html#_1-基本类型的变量是存放在栈区的-栈区指内存里的栈内存","12":"/前端/JavaScript/深拷贝的实现.html#_2-引用类型的变量将对象引用地址存储在栈中-对象里面的数据存放在堆中","13":"/前端/JavaScript/深拷贝的实现.html#_3-简单赋值","14":"/前端/JavaScript/深拷贝的实现.html#_4-对象引用","15":"/前端/JavaScript/深拷贝的实现.html#三、深拷贝和浅拷贝","16":"/前端/JavaScript/深拷贝的实现.html#四、json-parse-json-stringify","17":"/前端/JavaScript/深拷贝的实现.html#五、深拷贝","18":"/前端/JavaScript/深拷贝的实现.html#_1-循环引用","19":"/前端/JavaScript/深拷贝的实现.html#_2-使用-weakmap-优化","20":"/前端/JavaScript/深拷贝的实现.html#参考","21":"/前端/JavaScript/深拷贝的实现.html#博文系列目录","22":"/前端/JavaScript/深拷贝的实现.html#交流"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,1],"1":[1,1,33],"2":[2,1,8],"3":[3,1,34],"4":[5,1,9],"5":[1,1,16],"6":[1,1,31],"7":[1,1,6],"8":[1,1,1],"9":[4,1,12],"10":[3,1,25],"11":[4,4,14],"12":[3,4,27],"13":[2,4,25],"14":[2,4,33],"15":[2,1,15],"16":[5,1,132],"17":[2,1,42],"18":[2,3,81],"19":[4,3,86],"20":[1,1,24],"21":[1,2,14],"22":[1,2,9]},"averageFieldLength":[2.260869565217391,1.7826086956521738,29.47826086956522],"storedFields":{"0":{"title":"原型到原型链","titles":[]},"1":{"title":"前言","titles":["原型到原型链"]},"2":{"title":"谈谈你对原型的理解？","titles":["原型到原型链"]},"3":{"title":"什么是原型链？原型链解决的是什么问题？","titles":["原型到原型链"]},"4":{"title":"prototype 和 __proto__ 区别是什么？","titles":["原型到原型链"]},"5":{"title":"解析原型链","titles":["原型到原型链"]},"6":{"title":"constructor","titles":["原型到原型链"]},"7":{"title":"参考","titles":["原型到原型链"]},"8":{"title":"深拷贝的实现","titles":[]},"9":{"title":"一、什么是深拷贝？深拷贝和浅拷贝有什么区别？","titles":["深拷贝的实现"]},"10":{"title":"二、JS 的变量存储类型","titles":["深拷贝的实现"]},"11":{"title":"1. 基本类型的变量是存放在栈区的（栈区指内存里的栈内存）","titles":["深拷贝的实现","二、JS 的变量存储类型"]},"12":{"title":"2. 引用类型的变量将对象引用地址存储在栈中，对象里面的数据存放在堆中","titles":["深拷贝的实现","二、JS 的变量存储类型"]},"13":{"title":"3. 简单赋值","titles":["深拷贝的实现","二、JS 的变量存储类型"]},"14":{"title":"4. 对象引用","titles":["深拷贝的实现","二、JS 的变量存储类型"]},"15":{"title":"三、深拷贝和浅拷贝","titles":["深拷贝的实现"]},"16":{"title":"四、JSON.parse(JSON.stringify())","titles":["深拷贝的实现"]},"17":{"title":"五、深拷贝","titles":["深拷贝的实现"]},"18":{"title":"1. 循环引用","titles":["深拷贝的实现","五、深拷贝"]},"19":{"title":"2. 使用 WeakMap 优化","titles":["深拷贝的实现","五、深拷贝"]},"20":{"title":"参考","titles":["深拷贝的实现"]},"21":{"title":"博文系列目录","titles":["深拷贝的实现","参考"]},"22":{"title":"交流","titles":["深拷贝的实现","参考"]}},"dirtCount":0,"index":[["yuanyuanbyte",{"2":{"22":1}}],["各系列文章汇总",{"2":{"22":1}}],["交流",{"0":{"22":1}}],["应知应会系列",{"2":{"21":2}}],["https",{"2":{"22":1}}],["html",{"2":{"21":1}}],["has",{"2":{"18":1}}],["hasownproperty",{"2":{"17":3,"18":1}}],["性能优化与网络安全系列",{"2":{"21":1}}],["vue",{"2":{"21":1}}],["value",{"2":{"16":4,"18":2,"20":1}}],["val",{"2":{"16":1}}],["var",{"2":{"5":1,"6":1,"11":2,"12":2,"13":2,"14":2,"16":1,"18":1}}],["系列",{"2":{"21":2}}],["浏览器系列",{"2":{"21":1}}],["网络系列",{"2":{"21":1}}],["基础系列",{"2":{"21":1}}],["基本类型的变量是存放在栈区的",{"0":{"11":1}}],["基本类型",{"2":{"10":1}}],["专题系列",{"2":{"21":1}}],["博文系列目录",{"0":{"21":1}}],["查看全部文章",{"2":{"20":1}}],["99",{"2":{"20":1}}],["7976931348623157e+308",{"2":{"20":1}}],["7976931348623157e+10308",{"2":{"16":4}}],["世界的神秘数字",{"2":{"20":1}}],["探秘",{"2":{"20":1}}],["能考虑到循环引用的问题",{"2":{"19":1}}],["你已经向面试官展示了你考虑问题的全面性",{"2":{"19":1}}],["你写的每一行代码也都是需要经过深思熟虑并且非常明白的",{"2":{"19":1}}],["你必须要懂的原生js",{"2":{"7":1}}],["即使是准备面试",{"2":{"19":1}}],["即便是在",{"2":{"1":1}}],["结果只能是给自己挖坑",{"2":{"19":1}}],["我是圆圆",{"2":{"22":1}}],["我建议你也不要在面试中写这样的代码",{"2":{"19":1}}],["我也经常在某些代码中看到有人使用",{"2":{"19":1}}],["我们只有手动将",{"2":{"19":1}}],["我们默认创建一个对象",{"2":{"19":1}}],["我们可以选择",{"2":{"18":1}}],["我们拷贝一下前面循环引用的例子",{"2":{"18":1}}],["我们应该拷贝要拷贝对象自身的属性",{"2":{"17":1}}],["设想一下",{"2":{"19":1}}],["存在的就是弱引用关系",{"2":{"19":1}}],["存在强引用关系",{"2":{"19":1}}],["依然对",{"2":{"19":1}}],["依靠",{"2":{"16":1}}],["然是",{"2":{"19":1}}],["然后再把该值复制到为新变量分配的位置上",{"2":{"13":1}}],["然后对象里面的数据存放在堆中",{"2":{"10":1}}],["进行释放",{"2":{"19":1}}],["进行存储",{"2":{"18":1}}],["虽然我们手动将",{"2":{"19":1}}],["举个例子",{"2":{"19":1}}],["垃圾回收机制会自动帮我们回收",{"2":{"19":1}}],["它才会被垃圾回收机制进行回收",{"2":{"19":1}}],["它们的关系如下图",{"2":{"14":1}}],["就默认创建了一个强引用的对象",{"2":{"19":1}}],["就是拷贝a对象里面的数据",{"2":{"15":1}}],["弱引用与强引用相对",{"2":{"19":1}}],["先来看看",{"2":{"19":1}}],["先去存储空间中找",{"2":{"18":1}}],["为什么要这样做呢",{"2":{"19":1}}],["为什么叫隐式呢",{"2":{"3":1}}],["如何写出一个惊艳面试官的深拷贝",{"2":{"19":1,"20":1}}],["如下",{"2":{"19":1}}],["如果还能用",{"2":{"19":1}}],["如果我们要拷贝的对象非常庞大时",{"2":{"19":1}}],["如果我们使用",{"2":{"19":1}}],["如果是",{"2":{"19":1}}],["如果是弱引用对象",{"2":{"19":1}}],["如果没有的话继续拷贝",{"2":{"18":1}}],["如果有的话直接返回",{"2":{"18":1}}],["如果",{"2":{"17":1,"18":1}}],["如果不是复杂数据类型",{"2":{"17":1,"18":1}}],["替代",{"2":{"19":1}}],["下面我们用",{"2":{"19":1}}],["优化",{"0":{"19":1}}],["webpack",{"2":{"21":1}}],["weakmap",{"0":{"19":1},"2":{"19":11}}],["w+",{"2":{"16":1}}],["使用",{"0":{"19":1},"2":{"19":1}}],["使用原型对象的好处是所有对象实例共享它所包含的属性和方法",{"2":{"2":1}}],["继续克隆",{"2":{"18":1}}],["克隆对象作为",{"2":{"18":1}}],["没有",{"2":{"18":1}}],["没有原型",{"2":{"1":1}}],["有",{"2":{"18":1}}],["有没有拷贝过这个对象",{"2":{"18":1}}],["检查",{"2":{"18":1}}],["且",{"2":{"18":1}}],["形式的数据",{"2":{"18":1}}],["形成无限循环",{"2":{"16":1}}],["需要可以存储",{"2":{"18":1}}],["可以是一个引用类型",{"2":{"18":1}}],["可以额外开辟一个存储空间",{"2":{"18":1}}],["可以获得对象的原型",{"2":{"6":1}}],["解决问题",{"2":{"19":1}}],["解决循环引用问题",{"2":{"18":1}}],["解析原型链",{"0":{"5":1}}],["超出最大调用堆栈大小",{"2":{"18":1}}],["rangeerror",{"2":{"18":1}}],["return",{"2":{"17":4,"18":5}}],["reference",{"2":{"16":1}}],["re",{"2":{"16":2}}],["regexp",{"2":{"10":1,"16":2,"17":2,"18":2}}],["循环引用部分内容出自",{"2":{"19":1}}],["循环引用的问题解决了",{"2":{"18":1}}],["循环引用会使递归进入死循环导致栈内存溢出",{"2":{"18":1}}],["循环引用",{"0":{"18":1}}],["方法会返回一个布尔值",{"2":{"17":1}}],["方法来解决",{"2":{"17":1}}],["递归",{"2":{"17":1,"18":1}}],["递归拷贝",{"2":{"17":1,"18":1}}],["筛掉对象原型链上继承的属性",{"2":{"17":1,"18":1}}],["判断是否是对象自身的属性",{"2":{"17":1,"18":1}}],["key",{"2":{"17":5,"18":8}}],["let",{"2":{"17":2,"18":2,"19":2}}],["log",{"2":{"5":1,"6":4,"13":2,"14":5,"16":1}}],["直接返回",{"2":{"17":1,"18":2}}],["直接存储在栈中的数据",{"2":{"10":1}}],["||",{"2":{"17":1,"18":1}}],["五",{"0":{"17":1},"1":{"18":1,"19":1}}],["提示信息",{"2":{"16":1}}],["uncaught",{"2":{"16":1,"18":1}}],["undefined",{"2":{"10":1,"16":2}}],["underscore",{"2":{"3":3}}],["或弱可访问",{"2":{"19":1}}],["或者为null",{"2":{"17":1,"18":1}}],["或",{"2":{"16":1}}],["map",{"2":{"18":8,"19":6,"20":1}}],["maximum",{"2":{"18":1}}],["math",{"2":{"10":1}}],["myself",{"2":{"16":1,"18":1}}],["opera",{"2":{"16":2}}],["otherdata",{"2":{"16":1,"18":1}}],["obj",{"2":{"16":2,"17":13,"18":16,"19":12,"20":1}}],["object",{"2":{"1":2,"3":1,"6":2,"16":3,"17":1,"18":1,"20":1}}],["序列化",{"2":{"16":1}}],["5",{"2":{"16":1}}],["显示为",{"2":{"16":2}}],["格式的数值都会被当做",{"2":{"16":1}}],["if",{"2":{"17":4,"18":5}}],["instanceof",{"2":{"17":2,"18":2}}],["in",{"2":{"16":1,"17":1,"18":1}}],["infinitymin",{"2":{"16":2}}],["infinitymax",{"2":{"16":2}}],["infinity",{"2":{"16":3}}],["isarray",{"2":{"17":1,"18":1}}],["is",{"2":{"16":1}}],["for",{"2":{"17":1,"18":1}}],["foo",{"2":{"16":1}}],["firefox",{"2":{"16":2}}],["function",{"2":{"16":1,"17":1,"18":1,"19":1}}],["func",{"2":{"16":1}}],["值对的集合",{"2":{"19":1}}],["值",{"2":{"16":1}}],["set",{"2":{"18":1,"19":2}}],["size",{"2":{"18":1}}],["stack",{"2":{"18":1}}],["structure",{"2":{"16":2}}],["stringify",{"0":{"16":1},"2":{"16":11,"20":2}}],["string",{"2":{"10":1,"16":1}}],["supported",{"2":{"16":1}}],["sym",{"2":{"16":1}}],["symbol",{"2":{"16":2}}],["以及",{"2":{"16":1}}],["以及单体内置对象",{"2":{"10":1}}],["任意的函数",{"2":{"16":1}}],["任何的操作都会相互影响",{"2":{"14":1}}],["x",{"2":{"16":1}}],["xiaoq",{"2":{"12":1}}],["xiaom",{"2":{"12":1}}],["exceeded",{"2":{"18":1}}],["edge",{"2":{"16":1}}],["err",{"2":{"16":2}}],["error",{"2":{"16":2}}],["es6",{"2":{"1":1}}],["es2015",{"2":{"1":1}}],["000z",{"2":{"16":1}}],["00",{"2":{"16":2}}],["09",{"2":{"16":1}}],["quot",{"2":{"16":18}}],["日期调用了",{"2":{"16":1}}],["typeof",{"2":{"17":1,"18":1}}],["typeerror",{"2":{"16":5,"20":1}}],["to",{"2":{"16":2}}],["toisostring",{"2":{"16":1}}],["tojson",{"2":{"16":1}}],["target",{"2":{"16":8,"19":6}}],["true",{"2":{"5":1,"6":4,"14":1}}],["原因在于",{"2":{"16":1}}],["原型对象也可能拥有原型",{"2":{"6":1}}],["原型链解决的主要是继承问题",{"2":{"3":1}}],["原型链解决的是什么问题",{"0":{"3":1}}],["原型到原型链",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1}}],["只能用来序列化对象",{"2":{"16":1}}],["只有一种结构",{"2":{"1":1}}],["还原",{"2":{"16":1}}],["来解决循环引用问题",{"2":{"19":1}}],["来优化深拷贝的实现",{"2":{"19":1}}],["来存储当前对象和拷贝对象的对应关系",{"2":{"18":1}}],["来反序列化",{"2":{"16":1}}],["来初始化",{"2":{"13":1}}],["再来看",{"2":{"19":1}}],["再次执行前面的用例可以发现没有报错",{"2":{"18":1}}],["再使用",{"2":{"16":1}}],["再复制",{"2":{"9":1}}],["将当前对象作为",{"2":{"18":1}}],["将其转换为了",{"2":{"16":1}}],["将",{"2":{"16":1}}],["将该对象引用地址存储在栈中",{"2":{"10":1}}],["其键必须是对象",{"2":{"19":1}}],["其中的键是弱引用的",{"2":{"19":1}}],["其过程说白了就是利用",{"2":{"16":1}}],["其不允许直接访问内存中的位置",{"2":{"12":1}}],["想要深拷贝一个对象",{"2":{"16":1}}],["四",{"0":{"16":1}}],["赋值",{"2":{"15":1}}],["而",{"2":{"19":1}}],["而值可以是任意的",{"2":{"19":1}}],["而且我们需要手动清除",{"2":{"19":1}}],["而且可以应对大部分的应用场景",{"2":{"16":1}}],["而且拷贝它里面的子对象",{"2":{"15":1}}],["而这个指针指向存储在堆内存的一个对象",{"2":{"14":1}}],["会帮我们巧妙化解这个问题",{"2":{"19":1}}],["会对内存造成非常大的额外消耗",{"2":{"19":1}}],["会抛出",{"2":{"16":1}}],["会抛出错误",{"2":{"16":1}}],["会克隆出一个对象",{"2":{"15":1}}],["会在该变量上创建一个新值",{"2":{"13":1}}],["浅拷贝与深拷贝",{"2":{"20":1}}],["浅拷贝",{"2":{"15":1}}],["浅拷贝是指只复制第一层对象",{"2":{"9":1}}],["最后再来看深拷贝和浅拷贝还有赋值的区别",{"2":{"15":1}}],["最终关系图",{"2":{"6":1}}],["最终指向null",{"2":{"3":1,"6":1}}],["三",{"0":{"15":1}}],["都会相互影响",{"2":{"14":1}}],["都有一个私有属性",{"2":{"1":1}}],["改变其中任何一个变量",{"2":{"14":1}}],["因此导致运行失败",{"2":{"16":1}}],["因此会被当做字符串处理",{"2":{"16":1}}],["因此两个变量指向同一个对象",{"2":{"14":1}}],["因此",{"2":{"14":2}}],["因为一个构造函数可以生成多个实例",{"2":{"6":1}}],["两个变量都保存了同一个对象地址",{"2":{"14":1}}],["两个变量是相互不受影响的",{"2":{"13":1}}],["与简单赋值不同",{"2":{"14":1}}],["与其构造函数的",{"2":{"4":1}}],["保存在变量中的是对象在堆内存中的地址",{"2":{"14":1}}],["前面讲引用类型的时候提到",{"2":{"14":1}}],["前言",{"0":{"1":1}}],["同",{"2":{"16":1}}],["同样也会将存储在变量中的对象的值复制一份放到为新变量分配的空间中",{"2":{"14":1}}],["同时原型对象也可能拥有原型",{"2":{"3":1}}],["4",{"0":{"14":1},"2":{"16":1}}],["此后",{"2":{"13":1}}],["此时",{"2":{"13":1}}],["该方法会忽略掉那些从原型链上继承到的属性",{"2":{"17":1}}],["该值只是a中的值的一个副本",{"2":{"13":1}}],["该原型对象也有一个自己的原型对象",{"2":{"1":1}}],["时间对象序列化后会变成字符串",{"2":{"16":1}}],["时",{"2":{"13":1}}],["++",{"2":{"13":1}}],["blog",{"2":{"22":1}}],["b",{"2":{"13":4,"14":5}}],["boolean",{"2":{"10":1}}],["array",{"2":{"17":1,"18":1}}],["argument",{"2":{"16":1}}],["and",{"2":{"16":2}}],["a和b都指向了这个空对象",{"2":{"14":1}}],["a保存了一个空对象的实例",{"2":{"14":1}}],["a中保存的值为",{"2":{"13":1}}],["a",{"2":{"13":5,"14":6}}],["age",{"2":{"11":1,"14":3}}],["简单赋值和对象引用",{"2":{"15":1}}],["简单赋值",{"0":{"13":1}}],["3",{"0":{"13":1},"2":{"16":1}}],["则被认为是不可访问",{"2":{"19":1}}],["则这两个变量指向了同一个对象",{"2":{"14":1}}],["则这三个对象的在内存中保存的情况如下图",{"2":{"12":1}}],["则递归至基本类型变量后",{"2":{"9":1}}],["假如有以下几个对象",{"2":{"12":1}}],["假如有以下几个基本类型的变量",{"2":{"11":1}}],["也就是拷贝a对象里面的数据",{"2":{"15":1}}],["也就是说基本类型在赋值操作后",{"2":{"13":1}}],["也就是说不能直接操作对象的内存空间",{"2":{"12":1}}],["也可以说是该对象在堆内存的地址",{"2":{"12":1}}],["共同完成",{"2":{"12":1}}],["堆区是指内存里的堆内存",{"2":{"12":1}}],["准确地说",{"2":{"12":1}}],["所以这部分内存依然无法被释放",{"2":{"19":1}}],["所以",{"2":{"14":1}}],["所以引用类型的值是按引用访问的",{"2":{"12":1}}],["所以再更新下关系图",{"2":{"6":1}}],["那我们操作啥呢",{"2":{"12":1}}],["那么你的代码在面试官眼里应该算是合格了",{"2":{"19":1}}],["那么对象间是存在强引用关系的",{"2":{"19":1}}],["那么赋值操作后",{"2":{"14":1}}],["那么它的存储结构如下图",{"2":{"11":1}}],["那么原型是否有属性指向构造函数或者实例呢",{"2":{"5":1}}],["2018",{"2":{"16":1}}],["2",{"0":{"12":1,"19":1},"2":{"16":1}}],["22",{"2":{"11":1,"14":3}}],["变量的标识符和变量的值",{"2":{"11":1}}],["变量存储类型分两类",{"2":{"10":1}}],["栈区内存保存变量标识符和指向堆内存中该对象的指针",{"2":{"12":1}}],["栈区包括了",{"2":{"11":1}}],["栈区指内存里的栈内存",{"0":{"11":1}}],["123",{"2":{"16":1,"18":1}}],["1540047600000",{"2":{"16":1}}],["1536627600000",{"2":{"16":2}}],["11t01",{"2":{"16":1}}],["11",{"2":{"13":1}}],["10",{"2":{"13":3}}],["1",{"0":{"11":1,"18":1},"2":{"16":6,"20":1}}],["github",{"2":{"22":1}}],["get",{"2":{"18":1}}],["getprototypeof",{"2":{"6":1}}],["guangzhou",{"2":{"11":1}}],["global",{"2":{"10":1}}],["特殊的基本包装类型",{"2":{"10":1}}],["特殊的基本包装类型以及单体内置对象",{"2":{"10":1}}],["函数",{"2":{"10":1}}],["数值",{"2":{"16":1}}],["数据相同",{"2":{"15":1}}],["数组",{"2":{"10":1,"16":1}}],["数字",{"2":{"10":1}}],["引用类型的赋值其实是对象保存在栈区地址指针的赋值",{"2":{"14":1}}],["引用类型的存储需要内存的栈区和堆区",{"2":{"12":1}}],["引用类型的变量将对象引用地址存储在栈中",{"0":{"12":1}}],["引用类型",{"2":{"10":1}}],["布尔值和",{"2":{"16":1}}],["布尔值",{"2":{"10":1}}],["字符串",{"2":{"10":1,"16":2}}],["二",{"0":{"10":1},"1":{"11":1,"12":1,"13":1,"14":1}}],["互不影响",{"2":{"9":1}}],["对包含循环引用的对象",{"2":{"16":1}}],["对一个对象的修改并不会影响另一个对象",{"2":{"9":1}}],["对于非基本类型的变量",{"2":{"9":1}}],["对象是一组键",{"2":{"19":1}}],["对象原型上的属性我们不应该拷贝",{"2":{"17":1}}],["对象之间相互引用",{"2":{"16":1}}],["对象序列化后将只得到空对象",{"2":{"16":1}}],["对象序列化",{"2":{"16":1}}],["对象引用获得该对象的引用地址",{"2":{"15":1}}],["对象引用",{"0":{"14":1}}],["对象里面的数据存放在堆中",{"0":{"12":1}}],["对象",{"2":{"1":1,"10":1,"16":1}}],["当你不太了解",{"2":{"19":1}}],["当下一次垃圾回收机制执行时",{"2":{"19":1}}],["当需要拷贝当前对象时",{"2":{"18":1}}],["当从一个变量向另一个变量赋值引用类型的值时",{"2":{"14":1}}],["当使用",{"2":{"13":1}}],["当引用指向的值改变时也会跟着变化",{"2":{"9":1}}],["当谈到继承时",{"2":{"1":1}}],["实现深拷贝的弊端以及解决方法",{"2":{"20":1}}],["实现对对象的深拷贝",{"2":{"20":1}}],["实际上",{"2":{"12":1}}],["实质复制的是其引用",{"2":{"9":1}}],["实例对象和构造函数都可以指向原型",{"2":{"5":1}}],["实例的",{"2":{"4":1}}],["实例",{"2":{"3":1}}],["什么是弱引用呢",{"2":{"19":1}}],["什么是深拷贝",{"0":{"9":1}}],["什么是原型链",{"0":{"3":1}}],["深入系列",{"2":{"21":1}}],["深入之从原型到原型链",{"2":{"7":1}}],["深拷贝的终极探索",{"2":{"20":1}}],["深拷贝的实现",{"0":{"8":1},"1":{"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1}}],["深拷贝时存在很大缺陷",{"2":{"16":1}}],["深拷贝",{"0":{"17":1},"1":{"18":1,"19":1},"2":{"15":1}}],["深拷贝和浅拷贝",{"0":{"15":1}}],["深拷贝和浅拷贝有什么区别",{"0":{"9":1}}],["深拷贝后的对象与原来的对象是完全隔离的",{"2":{"9":1}}],["深拷贝复制变量值",{"2":{"9":1}}],["jack",{"2":{"16":1,"19":2}}],["javascript专题之深浅拷贝",{"2":{"20":1}}],["javascriptfunction",{"2":{"5":1,"6":2}}],["javascript",{"2":{"1":4,"2":1,"7":1,"12":1,"16":1,"20":1,"21":3}}],["jozo",{"2":{"11":1,"12":1,"14":3}}],["json字符串",{"2":{"16":1}}],["json",{"0":{"16":2},"2":{"16":20,"20":5}}],["jsvar",{"2":{"11":1,"12":1}}],["js",{"0":{"10":1},"1":{"11":1,"12":1,"13":1,"14":1},"2":{"16":2}}],["js的面向对象之封装",{"2":{"7":1}}],["上",{"2":{"7":1}}],["参考",{"0":{"7":1,"20":1},"1":{"21":1,"22":1}}],["顺便学习一个es5的方法",{"2":{"6":1}}],["综上我们已经得出",{"2":{"6":1}}],["但注意",{"2":{"16":1}}],["但b中的10与a中的是完全独立的",{"2":{"13":1}}],["但是解释都是模棱两可的",{"2":{"19":1}}],["但是引用地址不同",{"2":{"15":1}}],["但是不拷贝a对象里面的子对象",{"2":{"15":1}}],["但是当对象的属性是引用类型时",{"2":{"9":1}}],["但是原型指向构造函数倒是有的",{"2":{"6":1}}],["但那也只是语法糖",{"2":{"1":1}}],["既然实例对象和构造函数都可以指向原型",{"2":{"5":1}}],["com",{"2":{"22":1}}],["conardli大佬",{"2":{"19":1}}],["converting",{"2":{"16":2}}],["const",{"2":{"16":4,"19":3}}],["constructor",{"0":{"6":1},"2":{"6":3}}],["console",{"2":{"5":1,"6":4,"13":2,"14":5,"16":1}}],["css",{"2":{"21":1}}],["call",{"2":{"18":1}}],["cloneobj",{"2":{"17":3,"18":4}}],["class",{"2":{"1":2}}],["chrome",{"2":{"16":2}}],["cyclic",{"2":{"16":3,"20":1}}],["circular",{"2":{"16":3}}],["circularreference",{"2":{"16":4,"18":4}}],["city",{"2":{"11":1}}],["nan",{"2":{"16":4}}],["name",{"2":{"11":1,"12":3,"14":3,"16":1,"19":2}}],["not",{"2":{"16":2}}],["number",{"2":{"10":1}}],["null",{"2":{"1":2,"10":1,"16":5,"17":1,"18":1,"19":3}}],["new",{"2":{"5":1,"6":1,"16":5,"17":2,"18":3,"19":3}}],["==",{"2":{"6":2,"14":1,"17":1,"18":1}}],["===",{"2":{"3":1,"5":1,"6":2,"17":1,"18":1}}],["=",{"2":{"5":1,"6":1,"11":3,"12":3,"13":2,"14":4,"16":6,"17":2,"18":5,"19":9}}],["是指不能确保其引用的对象不会被垃圾回收器回收的引用",{"2":{"19":1}}],["是复杂数据类型",{"2":{"17":1,"18":1}}],["是浮点数的最小下限",{"2":{"16":1}}],["是浮点数的最大上限",{"2":{"16":1}}],["是操作对象的引用",{"2":{"12":1}}],["是每个实例都有的属性",{"2":{"4":1}}],["是构造函数的属性",{"2":{"4":1}}],["是动态的",{"2":{"1":1}}],["区别是什么",{"0":{"4":1}}],["一名深耕于前端开发的攻城狮",{"2":{"22":1}}],["一个对象若只被弱引用所引用",{"2":{"19":1}}],["一个对象可以拥有定义在其他对象中的属性和方法",{"2":{"3":1}}],["一般来讲最简单的用的最多的就是",{"2":{"16":1}}],["一般双下划线开头并结尾的属性和方法是不希望被直接使用和操作的",{"2":{"3":1}}],["一",{"0":{"9":1}}],["翻译做隐式原型链",{"2":{"3":1}}],["指",{"2":{"3":1}}],["指向实例倒是没有",{"2":{"6":1}}],["指向的是同一个对象",{"2":{"4":1}}],["指向的是null",{"2":{"3":1,"6":1}}],["指向其原型对象",{"2":{"3":1,"4":1}}],["指向它的构造函数的原型对象",{"2":{"1":1}}],["的人都不知道",{"2":{"20":1}}],["的真正作用时",{"2":{"19":1}}],["的属性才能释放这块内存",{"2":{"19":1}}],["的话",{"2":{"19":2}}],["的",{"2":{"19":1}}],["的作用",{"2":{"19":1}}],["的异常",{"2":{"16":1}}],["的变量存储类型",{"0":{"10":1},"1":{"11":1,"12":1,"13":1,"14":1}}],["的简拼",{"2":{"3":1}}],["的关系如下",{"2":{"3":1}}],["的实例",{"2":{"1":1}}],["的实现",{"2":{"1":1}}],["和其他语言不同",{"2":{"12":1}}],["和",{"0":{"4":1},"2":{"3":1,"16":1,"19":1}}],["parse",{"0":{"16":1},"2":{"16":4,"20":2}}],["parent",{"2":{"3":3}}],["person3",{"2":{"12":1}}],["person2",{"2":{"12":1}}],["person1",{"2":{"12":1}}],["person",{"2":{"5":5,"6":12,"19":2}}],["p",{"2":{"3":2}}],["prototype",{"0":{"4":1},"2":{"1":1,"3":3,"4":2,"5":1,"6":5}}],["proto",{"0":{"4":1},"2":{"1":2,"3":9,"4":2,"5":1,"6":2}}],["构造函数",{"2":{"3":1}}],["这块内存就会被释放掉",{"2":{"19":1}}],["这里我们用到",{"2":{"17":1}}],["这样就巧妙化解的循环引用的问题",{"2":{"18":1}}],["这样就好理解多了",{"2":{"15":1}}],["这样一层一层",{"2":{"3":1,"6":1}}],["这个存储空间",{"2":{"18":1}}],["这个方法可以用来检测一个对象是否含有特定的自身属性",{"2":{"17":1}}],["这个值的副本实际上是一个指针",{"2":{"14":1}}],["这个属性指向函数的原型对象",{"2":{"2":1}}],["这两个变量可以参加任何操作而相互不受影响",{"2":{"13":1}}],["这就要讲到第三个属性",{"2":{"6":1}}],["这种数据结构",{"2":{"18":1}}],["这种写法非常简单",{"2":{"16":1}}],["这种属性我们通常称它为隐式",{"2":{"3":1}}],["这种关系被称为原型链",{"2":{"3":1}}],["并很明确的向面试官解释这样做的目的",{"2":{"19":1}}],["并因此可能在任何时刻被回收",{"2":{"19":1}}],["并不会尝试解决这个问题",{"2":{"16":1}}],["并从中继承方法和属性",{"2":{"3":1}}],["并作为这个原型链中的最后一个环节",{"2":{"1":1}}],["deepclone",{"2":{"17":2,"18":3,"19":1}}],["defined",{"2":{"16":1}}],["date",{"2":{"10":1,"16":6,"17":2,"18":2}}],["double",{"2":{"3":3}}],["dunder是",{"2":{"3":1}}],["dunder",{"2":{"3":2}}],["读音",{"2":{"3":2}}],["通过递归实现深拷贝",{"2":{"17":1}}],["通过原型链",{"2":{"3":1}}],["通过",{"2":{"3":1}}],["属性",{"2":{"2":1}}],["每个原型都有一个constructor属性指向关联的构造函数",{"2":{"6":1}}],["每个对象拥有一个原型对象",{"2":{"3":1}}],["每个函数对象都有一个prototype",{"2":{"2":1}}],["每个实例对象",{"2":{"1":1}}],["在计算机程序设计中",{"2":{"19":1}}],["在序列化过程中会被忽略",{"2":{"16":1}}],["在序列化时会有以下问题",{"2":{"16":1}}],["在不使用第三方库的情况下",{"2":{"16":1}}],["在从一个变量向另一个变量赋值基本类型时",{"2":{"13":1}}],["在",{"2":{"2":1,"16":1}}],["谈谈你对原型的理解",{"0":{"2":1}}],["中有无克隆过的对象",{"2":{"18":1}}],["中出现循环引用时",{"2":{"16":1}}],["中保存的值也为10",{"2":{"13":1}}],["中",{"2":{"2":1}}],["中的对象都是位于原型链顶端的",{"2":{"1":1}}],["中引入了",{"2":{"1":1}}],["几乎所有",{"2":{"1":1}}],["根据定义",{"2":{"1":1}}],["层层向上直到一个对象的原型对象为",{"2":{"1":1}}],["称之为",{"2":{"1":1}}],["仍然是基于原型的",{"2":{"1":1}}],["关键字",{"2":{"1":1}}],["本身不提供一个",{"2":{"1":1}}]],"serializationVersion":2}';export{t as default};
